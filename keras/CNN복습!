keras.layers.Conv2D(filters, kernel_size, strides=(1, 1), padding='valid' or 'same')

ex)model.add(Conv2D(10,(2,2),input_shape=(5,5,1)))
filters: 아웃풋 필터의 수
kernal_size: 어떻게 자를 것인가
strides: 보폭의 크기(stride가 커지면 속도는 빨라지지만, 정확도는 떨어진다.)
input_shape: 쪼갠 거 가로, 세로

ex)(10,(3,3),input_shape=(10,10,1))
>>(10-3+1,10-3+1,10)=(8,8,10)
(7,(4,4))
>>(8-4+1,8-4+1,7)

**kernal_size로 잘랐을 때 문제점 발견!
겹치는 부분은 특성이 잘 나오지만, 맨 끝 가장자리 부분은 상대적으로 많이 겹치지 않아 가운데 데이터에 비해 상대적인 손실이 발생할 수 있음

***이때 써주는 것이 'padding'-->가장자리 데이터 손실을 막아준다.
***padding='same'써주면 동일한 사이즈로 반환해준다. 
>>>즉, padding="same"은 사이드 데이터 유출 막으면서, input_shape와 같은 크기 유지하게끔 해준다.
>>>또한, padding의 디폴트값은 valid이다.(동일 크기 padding해주지 않고, 출력이미지 크기 < 입력이미지 크기)

***특성에서 가장 중요한 것만 뽑아내보자!
>>>MaxPooling(이것은 선택적 사항이다, 필수 아님)
MaxPooling=2는 2x2사이즈로 데이터를 분할해서 가장 중요한 것 하나씩만 뽑아낸다.
뽑아낸 거 다시 조합


***마지막으로 출력하기 위해서는 Dense모델 써야한다.
>>>Dense는 몇차?
>>>2차!
따라서 2차로 반환해주어야 한다. 이때 쓰는 것이 Flatten()기능이다.
flatten써주게 되면 ex)(None,3,3,5)--->(None,45)로 변환해준다. Dense쓸 수 있게 바꿔줌
따라서 convolution layer의 끝은 flatten!
